@{
    ViewData["Title"] = "Dashboard";
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="row mb-2">
        <div class="col-12 page-header">
            <h1 class="page-title">Dashboard</h1>
            <div class="breadcrumb">
                <span><a asp-area="Admin" asp-controller="Dashboard" asp-action="Index">Home</a></span><i class="bi bi-chevron-right"></i><span>Dashboard</span>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="stats-cards">
        <div class="card">
            <div class="card-icon" style="background: rgba(52, 152, 219, 0.2)">
                <i class="bi bi-people text-primary"></i>
            </div>
            <div class="card-content">
                <h3>Total Registered Users</h3>
                <p>@Model.TotalRegisteredUsers</p>
            </div>
        </div>
        <div class="card">
            <div class="card-icon" style="background: rgba(231, 76, 60, 0.2)">
                <i class="bi bi-buildings text-danger"></i>
            </div>
            <div class="card-content">
                <h3>Current Station Occupancy</h3>
                <p>@Model.CurrentPassengerCount</p>
            </div>
        </div>
        <div class="card">
            <div class="card-icon" style="background: rgba(46, 204, 113, 0.2)">
                <i class="bi bi-cash-coin text-success"></i>
            </div>
            <div class="card-content">
                <h3>Total Revenue</h3>
                <p><span style="font-family:'Inter',sans-serif">৳</span>@Model.TotalRevenue.ToString("N2")</p>
            </div>
        </div>
    </div>

    <!-- Charts -->
    <div class="charts-container">
        <div class="chart-card">
            <div class="chart-header">
                <h2>Ticket Type Distribution (Last 30 Days)</h2>
            </div>
            <div class="chart-body">
                <div class="chart-placeholder">
                    <canvas id="ticketComparisonChart"></canvas>
                </div>
            </div>
        </div>

        <div class="chart-card">
            <div class="chart-header">
                <h2>Revenue Analysis</h2>
            </div>
            <div class="chart-body">
                <div class="chart-placeholder">
                    <canvas id="revenueChart"></canvas>
                </div>
            </div>
        </div>
    </div>
    <div class="charts-container">
        <div class="chart-card">
            <div class="chart-header">
                <h2>Passenger Traffic</h2>
            </div>
            <div class="chart-body">
                <div class="chart-placeholder">
                    <canvas id="passengerTrafficChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js" integrity="sha512-ElRFoEQdI5Ht6kZvyzXhYG9NqjtkmlkfYk0wr6wHxU9JEHakS7UJZNeml5ALk+8IKlU6jDgMabC3vkumRokgJA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        $(document).ready(function() {
            // Get the data from the model
            const passengerTrafficData = @Html.Raw(Json.Serialize(Model.PassengerTraffic));
            const revenueAnalysisData = @Html.Raw(Json.Serialize(Model.RevenueAnalysis));

            // Extract labels and values
            const passengerLabels = passengerTrafficData.map(item => item.label);
            const passengerValues = passengerTrafficData.map(item => item.value);

            const revenueLabels = revenueAnalysisData.map(item => item.label);
            const revenueValues = revenueAnalysisData.map(item => item.value);

            // Create Passenger Traffic Chart (Line Chart)
            const passengerCtx = document.getElementById('passengerTrafficChart').getContext('2d');
            const passengerTrafficChart = new Chart(passengerCtx, {
                type: 'line',
                data: {
                    labels: passengerLabels,
                    datasets: [{
                        label: 'Passengers',
                        data: passengerValues,
                        borderColor: 'rgb(57, 181, 128)',
                        backgroundColor: 'rgba(149, 215, 187, 0.3)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            callbacks: {
                                label: function(context) {
                                    return 'Passengers: ' + context.raw.toLocaleString();
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false,
                            grid: {
                                drawBorder: false
                            },
                            ticks: {
                                callback: function(value) {
                                    return value.toLocaleString();
                                }
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            }
                        }
                    }
                }
            });

            // Create Revenue Analysis Chart (Bar Chart)
            const revenueCtx = document.getElementById('revenueChart').getContext('2d');
            const revenueChart = new Chart(revenueCtx, {
                type: 'bar',
                data: {
                    labels: revenueLabels,
                    datasets: [{
                        label: 'Revenue',
                        data: revenueValues,
                        backgroundColor: 'rgb(57, 181, 128)',
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return '৳' + context.raw.toLocaleString();
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                drawBorder: false
                            },
                            ticks: {
                                callback: function(value) {
                                    return '৳' + (value/1000) + 'k';
                                }
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            }
                        }
                    }
                }
            });

            // Create Ticket Type Comparison Chart (Pie Chart)
            const ticketComparisonCtx = document.getElementById('ticketComparisonChart').getContext('2d');
            const ticketComparisonChart = new Chart(ticketComparisonCtx, {
                type: 'pie',
                data: {
                    labels: ['RapidPass', 'QR Tickets'],
                    datasets: [{
                        data: [@Model.RapidPasses, @Model.QRTickets],
                        backgroundColor: [
                            'rgb(57, 181, 128)',
                            'rgb(149, 215, 187)'
                        ],
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const total = @Model.QRTickets + @Model.RapidPasses;
                                    const percentage = Math.round((context.raw / total) * 100);
                                    return context.label + ': ' + context.raw.toLocaleString() + ' (' + percentage + '%)';
                                }
                            }
                        }
                    }
                }
            });
        });
    </script>
}
